name: Deploy Gateway

on:
  push:
    branches:
      - feat/cicd  # 필요 시 'main'으로 변경
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: gateway-service
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Prepare SSH and Configuration Files
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DOCCONNETING_SSH_KEY }}" | base64 --decode > ~/.ssh/docconneting.pem
          chmod 600 ~/.ssh/docconneting.pem

          cat <<EOF > ~/.ssh/config
          Host bastion
            HostName ${{ secrets.BASTION_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/docconneting.pem
            StrictHostKeyChecking no

          Host gateway
            HostName ${{ secrets.GATEWAY_PRIVATE_IP }}
            User ubuntu
            IdentityFile ~/.ssh/docconneting.pem
            ProxyJump bastion
            StrictHostKeyChecking no
          EOF

          # 설정 파일 작성
          cat <<EOF > application-prod.yml
          server:
            port: 9000

          spring:
            application:
              name: api-gateway

            cloud:
              gateway:
                routes:
                  - id: alarm-service
                    uri: lb://alarm-service
                    predicates:
                      - Path=/api/v1/notifications/**
                  - id: main-service
                    uri: lb://main-service
                    predicates:
                      - Path=/api/v1/**

          eureka:
            client:
              register-with-eureka: true
              fetch-registry: true
              service-url:
                defaultZone: http://10.0.1.28:8761/eureka

          management:
            endpoints:
              web:
                exposure:
                  include: gateway
          EOF

          cat <<EOF > docker-compose.yml
          services:
            gateway:
              image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
              container_name: gateway
              restart: always
              ports:
                - "9000:9000"
              volumes:
                - ./application-prod.yml:/app/config/application-prod.yml
              environment:
                - SPRING_PROFILES_ACTIVE=prod
                - SPRING_CONFIG_ADDITIONAL_LOCATION=/app/config/
          EOF

      - name: Deploy to Gateway EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml application-prod.yml gateway:/home/ubuntu/server/

          ssh gateway <<EOF
            cd ~/server

            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi

            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose V2..."
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-linux-x86_64 \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            aws ecr get-login-password --region ap-northeast-2 | \
              sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            sudo docker compose down --remove-orphans
            sudo docker compose pull
            sudo docker system prune -af
            sudo docker compose up -d
          EOF
