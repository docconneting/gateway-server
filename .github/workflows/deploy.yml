name: Deploy Gateway

# 워크플로우 실행 조건: main 브랜치에 push가 발생하거나 수동 실행 시
on:
  push:
    branches:
      - main
  workflow_dispatch:

# 공통 환경 변수
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: gateway-service
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub에서 제공하는 Ubuntu 가상 환경에서 실행

    steps:
      # 1. GitHub 저장소의 코드를 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle로 Spring Boot 프로젝트 빌드 (테스트 생략)
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 4. AWS 자격 증명 구성 (ECR 접근 및 로그인에 필요)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 5. ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Docker 이미지 빌드 후 ECR에 Push
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # 7. SSH 연결 및 설정 파일 준비
      - name: Prepare SSH and Configuration Files
        run: |
          # SSH 키 설정
          mkdir -p ~/.ssh
          echo "${{ secrets.DOCCONNETING_SSH_KEY }}" | base64 --decode > ~/.ssh/docconneting.pem
          chmod 600 ~/.ssh/docconneting.pem
          
          # SSH 구성: Bastion → Gateway ProxyJump
          cat <<EOF > ~/.ssh/config
          Host bastion
            HostName ${{ secrets.BASTION_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/docconneting.pem
            StrictHostKeyChecking no

          Host gateway
            HostName ${{ secrets.GATEWAY_PRIVATE_IP }}
            User ubuntu
            IdentityFile ~/.ssh/docconneting.pem
            ProxyJump bastion
            StrictHostKeyChecking no
          EOF
          
          # application-prod.yml 복원 (시크릿에서 base64 디코딩)
          echo "${{ secrets.GATEWAY_BASE64 }}" | base64 --decode > application-prod.yml
          
          # docker-compose.yml 파일 생성
          cat <<EOF > docker-compose.yml
          services:
            gateway:
              image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
              container_name: gateway
              restart: always
              ports:
                - "9000:9000"
              volumes:
                - ./application-prod.yml:/app/config/application-prod.yml
              environment:
                - SPRING_PROFILES_ACTIVE=prod
                - SPRING_CONFIG_ADDITIONAL_LOCATION=/app/config/
          EOF

      # 8. EC2 서버에 배포
      - name: Deploy to Gateway EC2
        run: |
          # 설정 파일 전송
          scp -o StrictHostKeyChecking=no docker-compose.yml application-prod.yml gateway:/home/ubuntu/server/

          # 원격 접속 및 배포 실행
          ssh gateway <<EOF
            cd ~/server
            #  ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | \
              sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # 기존 컨테이너 종료 및 정리
            sudo docker compose down --remove-orphans
            sudo docker compose pull
            sudo docker system prune -af

            #  배포
            sudo docker compose up -d
          EOF
